import markdown
import re
import urllib.parse

from fastapi import FastAPI, Request, Form, Depends, HTTPException
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.templating import Jinja2Templates
from fastapi.security import HTTPBasic, HTTPBasicCredentials
from starlette.status import HTTP_401_UNAUTHORIZED
from sentence_transformers import SentenceTransformer
from pydantic import BaseModel
import chromadb
import openai
import os
import secrets
import csv
from dotenv import load_dotenv
from fulltext_validator import analyzuj_relevantni_banky_fulltextem

# --- P≈ôid√°no: zp≈ô√≠stupnƒõn√≠ modulu z root slo≈æky ---
import sys
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from fulltext_validator import analyzuj_relevantni_banky_fulltextem

# === Zv√Ωraznƒõn√≠ a prolinkov√°n√≠ citac√≠ ===
def highlight_citations(text: str) -> str:
    import re, urllib.parse

    def replace(match):
        citation = match.group(0)
        doc_match = re.search(r'dokument: ([^)]+)', citation)

        if not doc_match:
            return citation

        filename = doc_match.group(1).strip()
        safe_filename = urllib.parse.quote(filename)
        url = f"/metodiky/{safe_filename}"

        return f"<a href='{url}' target='_blank' class='citation'>{citation}</a>"

    pattern = r"\(dokument: [^)]+\)"
    return re.sub(pattern, replace, text)

# === Naƒçten√≠ .env promƒõnn√Ωch ===
load_dotenv()
USERNAME = os.getenv("APP_USERNAME")
PASSWORD = os.getenv("APP_PASSWORD")

# === Inicializace aplikace ===
app = FastAPI()
app.mount("/static", StaticFiles(directory="app/static"), name="static")
app.mount("/metodiky", StaticFiles(directory="metodiky_bank"), name="metodiky")

templates = Jinja2Templates(directory="app/templates")
security = HTTPBasic()

# === Embed model a vektorov√° DB ===
model = SentenceTransformer("intfloat/multilingual-e5-large")
client = chromadb.PersistentClient(path="./chroma_db")
collection = client.get_collection("hypoteky_all")

# === Autentizace ===
def check_auth(credentials: HTTPBasicCredentials = Depends(security)):
    if not (
        secrets.compare_digest(credentials.username, USERNAME)
        and secrets.compare_digest(credentials.password, PASSWORD)
    ):
        raise HTTPException(
            status_code=HTTP_401_UNAUTHORIZED,
            detail="P≈ô√≠stup odep≈ôen",
            headers={"WWW-Authenticate": "Basic"},
        )
    return credentials.username

# === Model zpƒõtn√© vazby ===
class Feedback(BaseModel):
    question: str
    answer: str
    feedback: str
    comment: str = ""

@app.post("/feedback")
async def receive_feedback(data: Feedback):
    feedback_file = "feedback.csv"
    file_exists = os.path.isfile(feedback_file)

    with open(feedback_file, mode="a", encoding="cp1250", newline="") as f:
        writer = csv.writer(f)
        if not file_exists:
            writer.writerow(["question", "answer", "feedback", "comment"])
        writer.writerow([data.question, data.answer, data.feedback, data.comment])

    return JSONResponse(content={"status": "success"})

# === GET ===
@app.get("/", response_class=HTMLResponse)
def form_get(request: Request, username: str = Depends(check_auth)):
    return templates.TemplateResponse("index.html", {"request": request, "result": None})

# === POST ===
@app.post("/", response_class=HTMLResponse)
def form_post(request: Request, dotaz: str = Form(...), username: str = Depends(check_auth)):
    embedding = model.encode(f"query: {dotaz.strip()}").tolist()
    results = collection.query(query_embeddings=[embedding], n_results=80, include=["documents", "metadatas"])

    # üîç DIAGNOSTICK√ù TEST: hled√°n√≠ "v√Ω≈æivn√©"
    vsechny = collection.get(limit=None)
    print("üì¶ Test: Fulltextovƒõ hled√°m 'v√Ω≈æivn√©' v datab√°zi...")

    for doc, meta in zip(vsechny.get("documents", []), vsechny.get("metadatas", [])):
        if "v√Ω≈æivn√©" in doc.lower():
            print(f"‚úÖ Nalezeno: banka={meta.get('banka')}, dokument={meta.get('document_source')}")

    from fulltext_validator import (
        analyzuj_relevantni_banky_fulltextem,
        zjisti_banky_z_embeddingu,
        porovnej_pokryti,
        analyzuj_banky_z_fulltextu  # <- p≈ôid√°me pro v√Ωpis
    )

    banky_z_fulltextu = analyzuj_banky_z_fulltextu(vsechny.get("metadatas", []))
    print("üìä Banky ve fulltext v√Ωstupu:", banky_z_fulltextu)

    # === Validace pokryt√≠ pomoc√≠ fulltextu ===
    from fulltext_validator import (
        analyzuj_relevantni_banky_fulltextem,
        zjisti_banky_z_embeddingu,
        porovnej_pokryti
    )

    hledane_slovo = dotaz.strip().lower()
    fulltext_banky = analyzuj_relevantni_banky_fulltextem(collection, hledane_slovo)
    embedding_banky = zjisti_banky_z_embeddingu(results["metadatas"][0])

    # üí¨ DEBUG v√Ωpisy:
    print("üìä Banky ve fulltext v√Ωstupu:", fulltext_banky)
    print("üìä Banky ve vektorov√©m v√Ωstupu:", embedding_banky)

    chybejici = porovnej_pokryti(fulltext_banky, embedding_banky)

    if chybejici:
        print("‚ö†Ô∏è Chybƒõj√≠c√≠ banky podle fulltext anal√Ωzy:", chybejici)

    def detect_bank(text):
        text = text.lower()
        if "kb" in text or "komercni" in text or "komerƒçn√≠" in text:
            return "Hypoteky_KB.pdf"
        elif "ƒçsob" in text or "csob" in text:
            return "Hypoteky_ƒåSOBHB.pdf"
        elif "rb" in text or "raiffeisen" in text:
            return "Hypoteky_RB_bonita_podnikani.pdf"
        elif "ucb" in text or "unicredit" in text:
            return "Hypoteky_UCB.pdf"
        elif "mbank" in text or "mb" in text:
            return "Hypoteky_mB.pdf"
        elif "ƒçs" in text or "ceska sporitelna" in text:
            return "Hypoteky_CS.pdf"
        elif "ob" in text or "oberbank" in text:
            return "Hypoteky_OB.pdf"
        else:
            return None

    requested_doc = detect_bank(dotaz)

    if requested_doc:
        found = any(
            requested_doc.lower() in (meta.get("document_source") or "").lower()
            for meta in results["metadatas"][0]
        )
        if not found:
            fallback = collection.get(limit=None)
            for doc, meta in zip(fallback["documents"], fallback["metadatas"]):
                if requested_doc.lower() in (meta.get("document_source") or "").lower():
                    results["documents"][0].append(doc)
                    results["metadatas"][0].append(meta)
                    print(f"‚úÖ Fallback p≈ôidal dokument: {requested_doc}")
                    break

    # üí° DIAGNOSTIKA: banky obsa≈æen√© ve v√Ωsledc√≠ch (embedding)
    banky_v_odpovedi = {
        meta.get("banka", "Nezn√°m√° banka").lower()
        for meta in results["metadatas"][0]
    }
    print("üìã Banky zahrnut√© do odpovƒõdi GPT:", banky_v_odpovedi)
    
    relevant_chunks = results["documents"][0]
    citace = [
        f"(dokument: {meta.get('document_source', '?')}, strana: {meta.get('strana', '?')}, kapitola: {meta.get('kapitola', '?')})"
        for meta in results["metadatas"][0]
    ]
    
    messages = [
        {
            "role": "system",
            "content": (
                "Jsi expertn√≠ asistent na hypot√©ky a posuzov√°n√≠ bonity klient≈Ø podle intern√≠ch metodik bank.\n\n"
    "üîç Nejprve zjisti, co je vstupem u≈æivatele:\n"
    "1. Pokud jde o plnohodnotn√Ω dotaz, klasifikuj ho internƒõ do jedn√© z tƒõchto kategori√≠:\n"
    "   - v√Ωƒçtov√Ω\n"
    "   - srovn√°vac√≠\n"
    "   - faktick√Ω\n"
    "   - podm√≠nkov√Ω\n"
    "   - kombinovan√Ω\n"
    "2. Pokud vstup nen√≠ √∫pln√Ωm dotazem (nap≈ô. jen fragment jako ‚Äûv√Ω≈æivn√© jako p≈ô√≠jem ≈æadatele‚Äú), logicky odvoƒè, co u≈æivatel pravdƒõpodobnƒõ zji≈°≈•uje, a pokraƒçuj podle odpov√≠daj√≠c√≠ logiky.\n"
    "3. Pokud dotaz neobsahuje n√°zev konkr√©tn√≠ banky, agreguj odpovƒõdi nap≈ô√≠ƒç v≈°emi dostupn√Ωmi dokumenty. Nikdy se nespokojuj pouze s jedn√≠m √∫ryvkem nebo jednou bankou.\n"
    "4. Pokud dotaz obsahuje konkr√©tn√≠ banku, pracuj prim√°rnƒõ s dokumenty t√©to banky. Ostatn√≠ dokumenty zva≈æ pouze tehdy, pokud je tato banka v√Ωslovnƒõ zm√≠nƒõna jinde nebo pokud vlastn√≠ dokument chyb√≠.\n\n"
    "üß© Instrukce podle typu dotazu:\n"
    "- V√Ωƒçtov√Ω: Vypi≈° ka≈ædou banku, kter√° podm√≠nku spl≈àuje. Ka≈ædou zvl√°≈°≈• se struƒçn√Ωm shrnut√≠m a citac√≠.\n"
    "  ‚ûï Pokud m√°≈° chunk pro danou banku, ale nenach√°z√≠≈° v nƒõm p≈ô√≠mou zm√≠nku k dotazu, zva≈æ mo≈ænost odpovƒõdi zalo≈æen√© na kombinaci dotazu a n√°zvu banky. Shr≈à i nep≈ô√≠m√© nebo kontextov√© informace, pokud jsou v chunc√≠ch uvedeny.\n"
    "- Srovn√°vac√≠: Porovnej hodnoty nap≈ô√≠ƒç bankami a uveƒè pouze tu nejlep≈°√≠ (nebo nƒõkolik s nejvy≈°≈°√≠ hodnotou).\n"
    "- Faktick√Ω: Odpovƒõz p≈ôesnƒõ a s citac√≠. Pokud informace chyb√≠, napi≈° to jasnƒõ.\n"
    "- Podm√≠nkov√Ω: Popi≈° okolnosti, za kter√Ωch situace nast√°v√°. P≈ôidej citace.\n"
    "- Kombinovan√Ω: Vyfiltruj banky spl≈àuj√≠c√≠ podm√≠nku a mezi nimi srovnej v√Ωhodnost. V√Ωsledek uveƒè jen pro ty nejlep≈°√≠.\n\n"
    "üõë Pravidla p≈ôesnosti:\n"
    "- Vych√°zej v√Ωhradnƒõ z √∫ryvk≈Ø z dokument≈Ø v datab√°zi (ChromaDB).\n"
    "- Nevym√Ω≈°lej informace. Nepou≈æ√≠vej web ani obecn√© znalosti.\n"
    "- Nep≈ôi≈ôazuj informace k bank√°m, kter√© je v√Ωslovnƒõ neuv√°dƒõj√≠.\n"
    "- V odpovƒõdi pou≈æ√≠vej n√°zvy bank p≈ôesnƒõ dle dokument≈Ø:\n"
    "  ‚Ä¢ Hypoteky_KB.pdf ‚Üí Komerƒçn√≠ banka\n"
    "  ‚Ä¢ Hypoteky_mB.pdf ‚Üí mBank\n"
    "  ‚Ä¢ Hypoteky_CS.pdf ‚Üí ƒåesk√° spo≈ôitelna\n"
    "  ‚Ä¢ Hypoteky_ƒåSOBHB.pdf ‚Üí ƒåSOB Hypoteƒçn√≠ banka\n"
    "  ‚Ä¢ Hypoteky_UCB.pdf ‚Üí UniCredit Bank\n"
    "  ‚Ä¢ Hypoteky_OB.pdf ‚Üí Oberbank AG\n"
    "  ‚Ä¢ Hypoteky_RB_bonita_podnikani.pdf ‚Üí Raiffeisenbank\n\n"
    "‚ôªÔ∏è Zamƒõniteln√© v√Ωrazy:\n"
    "- ‚Äûamerick√° hypot√©ka‚Äú = ‚Äûne√∫ƒçelov√Ω hypoteƒçn√≠ √∫vƒõr‚Äú = ‚Äûne√∫ƒçelov√° hypot√©ka‚Äú = ‚Äûne√∫ƒçelov√° ƒç√°st hypoteƒçn√≠ho √∫vƒõru‚Äú\n"
    "- ‚Äû√∫ƒçelov√° hypot√©ka‚Äú nen√≠ tot√©≈æ jako ‚Äûamerick√° hypot√©ka‚Äú. Nezamƒõ≈àuj tyto pojmy.\n"
    "  Pokud je v dotazu zm√≠nƒõna americk√° hypot√©ka, ignoruj informace o √∫ƒçelov√Ωch hypot√©k√°ch.\n\n"
    "üìã Struktura odpovƒõdi:\n"
    "- Pou≈æij p≈ôehledn√Ω form√°t ve stylu Markdown:\n"
    "  ‚Ä¢ Ka≈ædou banku zaƒçni nadpisem t≈ôet√≠ √∫rovnƒõ: ### üè¶ [N√°zev banky]\n"
    "  ‚Ä¢ Ka≈ædou ƒç√°st oznaƒç tuƒçnƒõ: **Podm√≠nky:**, **V√Ωpoƒçet:**, **Dolo≈æen√≠:** apod.\n"
    "  ‚Ä¢ Podm√≠nky a detaily strukturovanƒõ ve formƒõ odr√°≈æek: - ...\n"
    "  ‚Ä¢ Pokud existuje v√≠ce oblast√≠, rozdƒõl je logicky a vizu√°lnƒõ\n"
    "  ‚Ä¢ Na konec ka≈æd√©ho bloku p≈ôidej citaci: üìÑ Citace: (dokument: <n√°zev>, strana: <ƒç√≠slo>, kapitola: <ƒç√≠slo>)\n\n"
    "üß† Pozn√°mka:\n"
    "- Intern√≠ √∫vahy (nap≈ô. ‚ÄûDotaz je v√Ωƒçtov√Ω‚Äú) nezobrazuj u≈æivateli.\n"
    "- Odpovƒõƒè zaƒçni rovnou u≈æiteƒçnou informac√≠.\n"
    "  Nap≈ô√≠klad m√≠sto:\n"
    "  ‚ÄûDotaz je v√Ωƒçtov√Ω. U≈æivatel se pt√°, kter√© banky akceptuj√≠ v√Ω≈æivn√©...‚Äú\n"
    "  napi≈° p≈ô√≠mo:\n"
    "  ‚ÄûBanky, kter√© akceptuj√≠ v√Ω≈æivn√© jako p≈ô√≠jem ≈æadatele:‚Äú\n"
            )
        },
        {
            "role": "user",
            "content": f"Dotaz: {dotaz}\n\nZde jsou √∫ryvky z dokument≈Ø:\n\n" +
                    "\n\n".join([f"{chunk}\nUm√≠stƒõn√≠: {cit}" for chunk, cit in zip(relevant_chunks, citace)])
        }
    ]

    response = openai.chat.completions.create(
        model="gpt-4o",
        messages=messages,
        temperature=0
    )

    odpoved = response.choices[0].message.content
    odpoved_html = markdown.markdown(highlight_citations(odpoved))

    return templates.TemplateResponse("index.html", {"request": request, "result": odpoved_html, "dotaz": dotaz})
